# list
# 여러 요소들을 갖는 집합(컬렉션)으로 새로운 요소를 추가하거나 갱신, 삭제하는 일이 가능하다.
# 리스트의 요소들은 square bracket([])으로 둘러쌓여 컬렉션을 표현하는데,
# 각 요소들은 서로 다른 타입이 될 수 있으며, (,)로 구분한다.

a = []  # 빈 리스트
a = ["AB", 10, False]

# 리스트 인덱싱(Indexing)
# 특정 한 요소만을 선탹하기 위해 사용
# 첫번째 [0], 두번째 [1] 처럼 표현
# 특별한 표현: 인덱스에 -1, -2 같은 음수 사용 가능
#-1은 현재 리스트의 마지막 요소, -2는 뒤에서 두번째 요소

a = ["AB", 10, False]
x = a[1]  # a의 두번째 요소 읽기
print(x)
a[1] = "Test"  # a의 두번째 요소 변경
print(a[1]) 
y = a[-1]  # False

# 리스트 슬라이싱(Slicing)
# 일부 부분 요소들을 선택하기 위해 사용
# 리스트[처음 인덱스:마지막 인덱스] 와 같이 인덱스 표현에서 부분 집합의 범위 지정
# 0 부터 시작하며, 마지막 인덱스를 원하는 마지막 요소의 인덱스+1 을 의미
# 처음 인덱스가 생략일 경우 0 부터 시작
# 마지막 인덱스가 생략일 경우 리스트 끝까지

a = [1,3,5,7,10]
x = a[1:3]  # [3, 5]
x = a[:2]  # [1, 3]
x = a[3:]  # [7, 10]

# 리스트 요소 추가, 수정, 삭제
# 추가: "리스트.append()" 사용
# 삭제: del 사용

a = ["AB", 10, False]
a.append(21.5)  # 추가
print(a)  # ["AB", 10, False, 21.5]
a[1] = 11  # 변경
print(a)  # ["AB", 11, False, 21.5]
del a[2]  # 삭제
print(a)  # ["AB", 11, 21.5]

# 리스트 병합, 반복
# 병합: "+"  순서대로 병합된 새로운 하나의 리스트가 됨
# 반복: "리스트*N" 과 같이 표현(하나의 리스트 N번 반복)

a = [1, 2]
b = [3, 4, 5]
c = a + b
print(c)  # [1, 2, 3, 4, 5]

d = a * 3
print(d)  # [1, 2, 1, 2, 1, 2]

# 리스트 검색
# index() 메소드 사용
# count() 메소드는 특정 요소가 몇 개 있는지 체크하기 위함

mylist = "This is a book That is a pencil".split()  # split 함수는 문자열을 공백 혹은 어떠한 기준으로 나눌 때 사용, 나누어진 값은 리스트에 요소로 저장
i = mylist.index('book')
print(i)  # 3
i = mylist.index('That')
print(i)  # 4
n = mylist.count('is')
print(n)  # 2

# List Comprehension
# 리스트 [..] 괄호 안에 for 루프를 사용하여 반복적으로 표현식을 실행해 리스트 요소들을 정의하는 특별한 용법
# 컬렉션으로부터 요소를 하나씩 가져와 표현식을 실행하여 그 결과를 리스트에 담는 방식
# if 조건식은 옵션으로 추가될 수 있는데 for 루프에서 이 조건식에 맞는 요소만 표현식을 실행하게 됨
# [표현식 for 요소 in 컬렉션 [if 조건식]]

list = [n ** 2 for n in range(10) if n % 3 == 0]  # 0 ~ 9 중 3으로 나눈 나머지가 0인 숫자에 대해 그 제곱에 대한 리스트

print(list)  # [0, 9, 36, 81]

list = [n for n in range(10) if n % 2 == 0]

print(list)  # [0, 2, 4, 6, 8]

# tuple(튜플)
# 리스트와 비슷하게 여러 요소들을 갖는 컬렉션
# 리스트와 다른 점은 새로운 요소를 추가, 갱신, 삭제를 할 수 없다.
# 즉, 한번 결정된 요소를 변경할 수 없는 immutable 데이터 타입
# 따라서 tuple은 컬렉션이 항상 고정된 요소값을 갖기를 원하거나 변경되지 말아야 하는 경우에 사용
# (...)를 사용하여 컬렉션을 표현
# 각 요소들은 서로 다른 타입이 될 수 있으며, (,)로 구분

t = ("AB", 10, False)
print(t)

t1 = (123)  # 하나라도 (,)를 해야한다.
print(t1)  # 123
print(type(t1))  # class int

t2 = (123,)
print(t2)  # (123,)
print(type(t2))  # class tuple

# tuple 인덱싱과 슬라이싱
# 요소값을 변경, 추가, 삭제 불가능

t = (1, 5, 10)

second = t[1]
last = t[-1]
print(second)  # 5
print(last)  # 10

s = t[1:2]
print(s)  # 5
s = t[1:]
print(s)  # 10

# 병합, 반복
a = (1, 2)
b = (3, 4, 5)
c = a + b
print(c)  # (1, 2, 3, 4, 5)

d = a * 3  # 3 * a 도 동일
print(d)  # (1, 2, 1, 2, 1, 2)

# 변수 할당
# tuple 데이터를 변수에 할당할 때, 각 요소를 각각 다른 변수에 할당할 수도 있다.

name = ("John", "Kim")
print(name)  # tuple 전체를 할당 받는 변수

firstname, lastname = ("John", "Kim")
print(lastname, ",", firstname)